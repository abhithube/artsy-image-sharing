# An upload containing an image and related details
type Post {
  # The ID of a post
  id: Int!
  # The title of a post
  title: String!
  # The description of a post
  body: String
  # The uploaded image
  image: Image!
  # The user who created the post
  user: User!
  # The list of favorites added to a post
  favorites(
    # The way in which to order the list of favorites
    orderBy: FavoriteOrderByInput = { field: CREATED_AT, direction: DESC }
    # The number of favorites per page
    limit: Int = 20
    # The page number of favorites to query
    page: Int = 0
  ): FavoritesResponse
  # The number of favorites added to a post
  favoriteCount: Int
  # The list of comments added to a post
  comments(
    # The way in which to order the list of comments
    orderBy: CommentOrderByInput = { field: CREATED_AT, direction: DESC }
    # The number of comments per page
    limit: Int = 20
    # The page number of comments to query
    page: Int = 0
  ): CommentsResponse
  # The number of comments added to a post
  commentCount: Int
  # The time a post was created
  createdAt: DateTime!
  # The time a post was most recently updated
  updatedAt: DateTime!
}

extend type Query {
  # Get a list of paginated posts
  posts(
    # The ID of the user to filter results by
    userId: Int
    # The way in which to order the list of posts
    orderBy: PostOrderByInput = { field: CREATED_AT, direction: DESC }
    # The number of posts per page
    limit: Int = 20
    # The page number of posts to query
    page: Int = 0
  ): PostsResponse!
  # Get a post by ID
  post(
    # The ID of the post to query
    id: Int!
  ): PostResponse
  # Get posts related to a given post
  relatedPosts(
    # The ID of the post that results should be related to
    postId: Int!
  ): [Post!]
}

extend type Mutation {
  # Create a new post
  createPost(
    # The title of the post to create
    title: String!
    # The description of the post to create
    body: String
    # The data URI of the image to upload
    file: String!
  ): Post!
  # Update an existing post
  updatePost(
    # The ID of the post to update
    id: Int!
    # The new title of the post
    title: String
    # The new description of the post
    body: String
  ): Post!
  # Deleting an existing post
  deletePost(
    # The ID of the post to delete
    id: Int!
  ): Post!
}

# The response from a paginated posts query
type PostsResponse {
  # The current page of posts
  results: [Post!]!
  # The previous page number
  prevPage: Int
  # The next page number
  nextPage: Int
  # The total number of pages
  totalPages: Int!
}

# The response from a single post query
type PostResponse {
  # The post that has been queried
  result: Post!
  # The boolean indicating if the authenticated user has favorited the post
  isFavorite: Boolean!
}

# The inputs needed to sort a list of posts
input PostOrderByInput {
  # The field to sort posts by
  field: PostSortField!
  # The direction to sort posts in
  direction: SortDirection!
}

# The possible fields that posts can be sorted by
enum PostSortField {
  TITLE
  FAVORITE_COUNT
  COMMENT_COUNT
  CREATED_AT
  UPDATED_AT
}
